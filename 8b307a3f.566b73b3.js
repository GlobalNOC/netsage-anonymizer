(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{152:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(1),i=n(10),o=(n(0),n(164)),r={id:"docker",title:"Docker Guide",sidebar_label:"Docker Guide"},s={id:"docker",title:"Docker Guide",description:"# Docker Setup",source:"@site/docs/02_DOCKER.md",permalink:"/netsage-pipeline/docs/docker",editUrl:"https://github.com/netsage-project/netsage-pipeline/edit/master/docs/02_DOCKER.md",sidebar_label:"Docker Guide",sidebar:"someSidebar",previous:{title:"Installation Guide",permalink:"/netsage-pipeline/docs/install"},next:{title:"Docusuaurus Guide",permalink:"/netsage-pipeline/docs/docusaurus"}},c=[{value:"Retrieve Enrichment Metadata",id:"retrieve-enrichment-metadata",children:[]},{value:"Build Base Images",id:"build-base-images",children:[{value:"Build Using Source Code",id:"build-using-source-code",children:[]},{value:"Build Using Production RPM Release",id:"build-using-production-rpm-release",children:[]}]},{value:"Configuring the Containers",id:"configuring-the-containers",children:[{value:"Environment File",id:"environment-file",children:[]},{value:"Rabbit",id:"rabbit",children:[]},{value:"Importer",id:"importer",children:[]},{value:"Logstash",id:"logstash",children:[]}]},{value:"Running the Containers",id:"running-the-containers",children:[{value:"Start the Containers",id:"start-the-containers",children:[]},{value:"Stop the Containers",id:"stop-the-containers",children:[]},{value:"Enter a Container Shell",id:"enter-a-container-shell",children:[]},{value:"View Container Logs",id:"view-container-logs",children:[]}]}],l={rightToc:c};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"docker-setup"},"Docker Setup"),Object(o.b)("h2",{id:"retrieve-enrichment-metadata"},"Retrieve Enrichment Metadata"),Object(o.b)("p",null,"Run the following to download Science Registry and GeoIp data. You may re-run this at anytime to update these databases."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"./initialize_docker_data.sh\n")),Object(o.b)("h2",{id:"build-base-images"},"Build Base Images"),Object(o.b)("h3",{id:"build-using-source-code"},"Build Using Source Code"),Object(o.b)("p",null,"If you would like to build the ",Object(o.b)("em",{parentName:"p"},"importer")," container using the version of the pipeline scripts found in this GitHub repo then run the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"docker-compose -f docker-compose.build.yml build\n")),Object(o.b)("h3",{id:"build-using-production-rpm-release"},"Build Using Production RPM Release"),Object(o.b)("p",null,"You may also build the ",Object(o.b)("em",{parentName:"p"},"importer")," container using the RPM published in a remote GRNOC yum repo as opposed to your local copy of this source code. ",Object(o.b)("strong",{parentName:"p"},"NOTE: The published RPM may install a version of the importer scripts different from what is found in your local copy of this GitHub repository depending on when the RPM was last built and uploaded.")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Copy the env.example file to .env")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"cp env.example .env\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Add this entry:")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"RELEASE=true\n")),Object(o.b)("ol",{start:3},Object(o.b)("li",{parentName:"ol"},"Build the containers")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"docker-compose -f docker-compose.build.yml build\n")),Object(o.b)("h2",{id:"configuring-the-containers"},"Configuring the Containers"),Object(o.b)("h3",{id:"environment-file"},"Environment File"),Object(o.b)("p",null,"If you haven't done so already, copy env.example and update it to match your own settings:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"cp env.example .env\n")),Object(o.b)("h3",{id:"rabbit"},"Rabbit"),Object(o.b)("p",null,"This portion is primarily to set the Rabbit MQ server.  Most of the default settings work but whatever values you set\nhere should be consistent with the config for the logstash and importer "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"RABBITMQ_ERLANG_COOKIE='secret cookie'\nRABBIT_HOST=rabbit\nRABBITMQ_DEFAULT_USER=guest\nRABBITMQ_DEFAULT_PASS=guest\ndiscovery.type=single-node\n")),Object(o.b)("p",null,"Note the hostname will follow the docker-compose label.  You can rename it if you like but by default it's set to rabbit"),Object(o.b)("h3",{id:"importer"},"Importer"),Object(o.b)("p",null,"The importer config is defined in compose/netsage_shared.xml.  If you use different values then the defaults you may want to change them/ ",Object(o.b)("strong",{parentName:"p"},"NOTE: Changes will require you to rebuild the container")),Object(o.b)("h3",{id:"logstash"},"Logstash"),Object(o.b)("p",null,"Define the input rabbit queue.  This should match the importer output queue"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"rabbitmq_input_host=rabbit\nrabbitmq_input_username=guest\nrabbitmq_input_pw=guest\n\n")),Object(o.b)("p",null,"Define the output rabbit queue.  This can be the docker container or any valid RabbitMQ server."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"rabbitmq_output_host=rabbit\nrabbitmq_output_username=guest\nrabbitmq_output_pw=guest\nrabbitmq_output_key=netsage_archive_input\n")),Object(o.b)("h2",{id:"running-the-containers"},"Running the Containers"),Object(o.b)("h3",{id:"start-the-containers"},"Start the Containers"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"docker-compose up -d \n")),Object(o.b)("h3",{id:"stop-the-containers"},"Stop the Containers"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"docker-compose down\n")),Object(o.b)("h3",{id:"enter-a-container-shell"},"Enter a Container Shell"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"docker-compose exec logstash bash     #bash shell in logstash container\ndocker-compose exec importer bash     #bash shell in importer container\ndocker-compose exec rabbit bash       #bash shell in rabbit container\n")),Object(o.b)("h3",{id:"view-container-logs"},"View Container Logs"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"docker-compose logs -f              #view logs for all containers \ndocker-compose logs -f logstash     #view logs for logstash container\ndocker-compose logs -f importer     #view logs for importer container\ndocker-compose logs -f rabbit       #view logs for rabbit container\n")))}b.isMDXComponent=!0}}]);