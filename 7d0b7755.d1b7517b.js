(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{104:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return l})),a.d(e,"metadata",(function(){return c})),a.d(e,"toc",(function(){return i})),a.d(e,"default",(function(){return j}));var n=a(3),b=a(7),r=(a(0),a(150)),l={id:"elastic",title:"Elasticsearch",sidebar_label:"Elasticsearch"},c={unversionedId:"pipeline/elastic",id:"pipeline/elastic",isDocsHomePage:!1,title:"Elasticsearch",description:"Flow data is ultimately saved to Elasticsearch. Following are the fields that are used/created in Logstash and that you may see returned by an elasticsearch query.",source:"@site/docs/pipeline/elastic_search.md",slug:"/pipeline/elastic",permalink:"/netsage-pipeline/docs/next/pipeline/elastic",editUrl:"https://github.com/netsage-project/netsage-pipeline/edit/master/website/docs/pipeline/elastic_search.md",version:"current",sidebar_label:"Elasticsearch",sidebar:"Pipeline",previous:{title:"Logstash Pipeline",permalink:"/netsage-pipeline/docs/next/pipeline/logstash"},next:{title:"Choosing Install",permalink:"/netsage-pipeline/docs/next/deploy/choose_install"}},i=[{value:"Flow fields",id:"flow-fields",children:[]},{value:"Source Fields (Destination Fields similarly with &quot;dst&quot;)",id:"source-fields-destination-fields-similarly-with-dst",children:[]},{value:"Source Science Registry Fields  (Destination Fields similarly with &quot;dst&quot;)",id:"source-science-registry-fields--destination-fields-similarly-with-dst",children:[]},{value:"Source &quot;Preferred&quot; Fields (Destination Fields similarly with &quot;dst&quot;)",id:"source-preferred-fields-destination-fields-similarly-with-dst",children:[]},{value:"Value Fields",id:"value-fields",children:[]},{value:"Tstat Value Fields",id:"tstat-value-fields",children:[]},{value:"Developer Fields",id:"developer-fields",children:[]},{value:"Elasticsearch Fields",id:"elasticsearch-fields",children:[]}],O={toc:i};function j(t){var e=t.components,a=Object(b.a)(t,["components"]);return Object(r.b)("wrapper",Object(n.a)({},O,a,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Flow data is ultimately saved to Elasticsearch. Following are the fields that are used/created in Logstash and that you may see returned by an elasticsearch query."),Object(r.b)("h3",{id:"flow-fields"},"Flow fields"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"start"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Jun 9, 2020 @ 17:39:53.808"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Start time of the flow (first packet seen)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"end"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Jun 9, 2020 @ 17:39:57.699"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"End time of the flow   (last packet seen)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"a17c4f05420d7ded9eb151ccd293a633 ff226d1752b24e0f4139a87a8b26d779"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Id of the flow (hash of 5-tuple + Sensor name)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.flow_type"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sflow"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"'sflow', 'netflow', or 'tstat'")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.protocol"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"tcp"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Protocol used")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.sensor_id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"snvl2-pw-sw-1-mgmt-2.cenic.net"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sensor name (set in importer config, may not always be a hostname)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.sensor_group"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"CENIC"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sensor group, usually the network")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.sensor_type"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Regional Network"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sensor type ('Circuit', 'Regional Network', etc)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.country_scope"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Domestic"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"'Domestic', 'International', or 'Mixed', depending on countries of src and dst")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.is_network_testing"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"no"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"'yes' if discipline is 'CS.Network Testing and Monitoring' or port is one used for PerfSonar: 5001, 5101, or 5201")))),Object(r.b)("h3",{id:"source-fields-destination-fields-similarly-with-dst"},'Source Fields (Destination Fields similarly with "dst")'),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_ip"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"171.64.68.x"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"deidentified IP address")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_port"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"80"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"port used")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_asn"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"32"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Source ASN from the flow header or, in some cases, the ANS of the IP from the MaxMind GeoIP ASN database")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_organization"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Stanford University"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"organization that owns the AS from the CAIDA ASN-Organization database")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_location.lat"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"37.423"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"latitude of the IP from the MaxMind GeoIP City database")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_location.lon"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-122.164"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"longitude of the IP from the MaxMind GeoIP City database")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_country_name"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"United States"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"country of the IP from the MaxMind GeoIP City database")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_continent"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"North America"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"continent of the IP the MaxMind GeoIP City database")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_ifindex"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"166"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"the index of the interface the flow came into")))),Object(r.b)("h3",{id:"source-science-registry-fields--destination-fields-similarly-with-dst"},'Source Science Registry Fields  (Destination Fields similarly with "dst")'),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://scienceregistry.netsage.global/rdb/"}),"Science Registry"),' stores human-curated information about various "resources". Resources are sources and destinations of flows.'),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.discipline"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"MPS.Physics.High Energy"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The science discipline that uses the resource (ie IP). Note that  not the src MAY not have the same discipline as the dst.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.role"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Storage"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Role that the host plays")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.org_name"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boston University (BU)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The organization the manages and/or uses the resource, as listed in the Science Registry")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.org_abbr"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Boston U"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A shorter name for the organization. May not be the official abbreviation.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.resource"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"BU - ATLAS"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Descriptive resource name from SciReg")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.resource_abbr"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Resource abbreviation (if any)")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.project_names"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ATLAS"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'"Projects" that the resource is part of')),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.latitude"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"37.4178"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Resource's latitude, as listed in the Science Registry")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.scireg.src.longitude"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-122.178"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Resource's longitude, as listed in the Science Registry")))),Object(r.b)("h3",{id:"source-preferred-fields-destination-fields-similarly-with-dst"},'Source "Preferred" Fields (Destination Fields similarly with "dst")'),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_preferred_org"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Stanford University"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"If the IP was found in the Science Registry, this is the SciReg organization, otherwise it is the CAIDA organization")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_preferred_location.lat"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"37.417800"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Science Registry value if available, otherwise the MaxMind City DB value")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"meta.src_preferred_location.lon"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-122.172000i"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Science Registry value if available, otherwise the MaxMind City DB value")))),Object(r.b)("h3",{id:"value-fields"},"Value Fields"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.num_bits"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"939, 458, 560"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sum of the number of bits in the (stitched) flow")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.num_packets"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"77, 824"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sum of the number of packets in the (stitched) flows")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.duration"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"3.891"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Calculated as end minus start.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.bits_per_second"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"241, 443, 988"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Calculated as num_bits divided by duration")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.packets_per_second"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"20, 001"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Calculated as num_packets divided by duration")))),Object(r.b)("h3",{id:"tstat-value-fields"},"Tstat Value Fields"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_cwin_max"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1549681")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_cwin_min"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"17")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_initial_cwin"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"313")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_max_seg_size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"64313")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_min_seg_size"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"17")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_mss"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"8960")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_out_seq_pkts"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_pkts_dup"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_pkts_fc"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_pkts_fs"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_pkts_reor"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_pkts_rto"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_pkts_unfs"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_pkts_unk"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_pkts_unrto"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_rexmit_bytes"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1678")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_rexmit_pkts"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_rtt_avg"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.044")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_rtt_max"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"39.527")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_rtt_min"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.001")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_rtt_std"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"0.276")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_sack_cnt"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_win_max"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1549681")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_win_min"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"17")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"values.tcp_window_scale"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"13")))),Object(r.b)("h3",{id:"developer-fields"},"Developer Fields"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"@ingest_time"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Jun 9, 2020 @ 10:03:20.700"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Essentially time the flow went into the logstash pipeline or the time stitching of the flow commenced")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"@timestamp"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Jun 9, 2020 @ 18:03:21.703"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The time the flow went into the logstash pipeline for tstat flows, or the time stitching finished and the event was pushed for other flows.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"@exit_time"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Jun 9, 2020 @ 18:03:25.369"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The time the flow exited the pipeline")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"@processing_time"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"688.31"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"@exit_time minus @ingest_time. Useful for seeing how long stitching took.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"stitched_flows"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"13"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of flows that came into logstash that were stitched together to make this final one. 1 if no flows were stitched together. 0 for tstat flows, which are never stitched.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"es_doc_id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4f46bef884..."),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Hash of meta.id and start time. May be used as doc id in ES to prevent duplicates, but see Notes elsewhere.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"tags"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"maxmind src asn"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Various info and error messages")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"trial"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Can be set in 40-aggregation.conf if desired")))),Object(r.b)("h3",{id:"elasticsearch-fields"},"Elasticsearch Fields"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"name"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"example"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_index"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"om-ns-netsage-2020.06.14"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'name of the index ("database table")')),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_type"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_doc"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"set by ES")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_id"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"HRkcm3IByJ9fEnbnCpaY"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"elasticsearch document id. If es_doc_id is provided, that is used.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_score"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"set by ES query")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"@version"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"set by ES")))))}j.isMDXComponent=!0},150:function(t,e,a){"use strict";a.d(e,"a",(function(){return d})),a.d(e,"b",(function(){return m}));var n=a(0),b=a.n(n);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function c(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,b=function(t,e){if(null==t)return{};var a,n,b={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(b[a]=t[a]);return b}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(b[a]=t[a])}return b}var O=b.a.createContext({}),j=function(t){var e=b.a.useContext(O),a=e;return t&&(a="function"==typeof t?t(e):c(c({},e),t)),a},d=function(t){var e=j(t.components);return b.a.createElement(O.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return b.a.createElement(b.a.Fragment,{},e)}},s=b.a.forwardRef((function(t,e){var a=t.components,n=t.mdxType,r=t.originalType,l=t.parentName,O=i(t,["components","mdxType","originalType","parentName"]),d=j(a),s=n,m=d["".concat(l,".").concat(s)]||d[s]||p[s]||r;return a?b.a.createElement(m,c(c({ref:e},O),{},{components:a})):b.a.createElement(m,c({ref:e},O))}));function m(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var r=a.length,l=new Array(r);l[0]=s;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=t,c.mdxType="string"==typeof t?t:n,l[1]=c;for(var O=2;O<r;O++)l[O]=a[O];return b.a.createElement.apply(null,l)}return b.a.createElement.apply(null,a)}s.displayName="MDXCreateElement"}}]);