#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;

use JSON::XS;
use Try::Tiny;
use Number::Bytes::Human qw(format_bytes);
use Time::Duration;
use Time::HiRes;

#use constant DATA_DIR => '/home/mj82/dev/netsage/netflow-data/losa1002-csv/json-50M';
#use constant DATA_DIR => '/home/mj82/dev/netsage/netflow-data/losa1002-csv/json-100M';
use constant DATA_DIR => '/home/mj82/dev/netsage/netflow-data/losa1003-csv/json-500M';
#use constant DATA_DIR => '/home/mj82/dev/netsage/netflow-data/losa1002-csv/json-500M';
#use constant DATA_DIR => '/home/mj82/dev/netsage/netflow-data/losa1002-csv/json-1G';
use constant COLLECTION_INTERVAL => 60; # we are not doing anything with this yet
use constant ACCEPTABLE_OFFSET => 5; # the acceptable offset for flows to be considered the same

# create JSON object
my $json = JSON::XS->new();

my $dir = DATA_DIR;

opendir(DIR, $dir) or die $!;


my $all_data = [];

while (my $file = readdir(DIR)) {
    my $path = $dir . '/' . $file;
    # Use a regular expression to ignore files beginning with a period
    next if ($file =~ m/^\./);

    #warn "path: $path";
    my $json_data;
    {
        local $/; #Enable 'slurp' mode
        open my $fh, "<", $path || die ('error loading json file');
        $json_data = <$fh>;
        close $fh;
    }

    my $data;
    try {
        $data = $json->decode( $json_data );
        push @$all_data, @$data;
    } catch {
        warn( "Unable to JSON decode message: $_\npath: $path\njson_data: $json_data" )
    };

}

warn "Total flow count: " .  @$all_data;

my $cache = {};

#$all_data = sortdata( $all_data );

create_cache();

print_memusage();

sub create_cache {
    my $min_start;
    my $max_start;
    my $min_end;
    my $max_end;
    my $min_bytes;
    my $max_bytes;
    my $max_flows;
    my $min_duration;
    my $max_duration;
    my $overlaps = 0;
    my $stitchable_flows = 0;

    foreach my $row (@$all_data) {
        my $five = $row->{'meta'}->{'src_ip'};
        $five .= $row->{'meta'}->{'src_port'};
        $five .= $row->{'meta'}->{'dst_ip'};
        $five .= $row->{'meta'}->{'dst_port'};
        $five .= $row->{'meta'}->{'protocol'};
        #warn "five: $five\n";

        my $start = $row->{'start'};
        my $end = $row->{'end'};
        my $duration = $end - $start;

        #warn Dumper $row;
        if ( $cache->{$five}  ) {
            #warn "FIVE TUPLE ALREADY FOUND";
        } else {
            #$cache->{$five} = {};
        }
        #$cache->{$five}->{'start'} = $start;
        #$cache->{$five}->{'end'} = $end;
        #warn "start: $start; end: $end";
        my $last_start = $cache->{$five}->{'last_start'} || 0;
        my $last_end = $cache->{$five}->{'last_end'} || 0;
        if ( $start <= $last_start ) { # TODO: should this be < $last_end?
            #print "overlap: start: " . localtime( $start ) . " last_start: " . localtime( $last_start ) . "\n";
            print "flows overlap -- what should we do about overlapping flows?\n";
            $overlaps++;
            #print localtime( $start ) . "\t-\t" . localtime( $end ) . "\tcurrent\n";
            #print localtime( $last_start ) . "\t-\t" . localtime( $last_end ) . "\tlast\n";
        }
        $last_start = $start;
        $last_end = $end;
        $cache->{$five}->{'last_start'} = $last_start;
        $cache->{$five}->{'last_end'} = $last_end;

        if ( !defined $min_end || $end < $min_end ) {
            $min_end = $end;
        }
        if ( !defined $max_end || $end > $max_end ) {
            $max_end = $end;
        }

        if ( !defined $min_start || $start < $min_start ) {
            $min_start = $start;
        }
        if ( !defined $max_start || $start > $max_start ) {
            $max_start = $start;
        }
        if ( !defined $min_duration || $duration < $min_duration ) {
            $min_duration = $duration;
        }
        if ( !defined $max_duration || $duration > $max_duration ) {
            $max_duration = $duration;
        }

        my $bytes = $row->{'values'}->{'num_bits'} / 8;
        if ( !defined $min_bytes || $bytes < $min_bytes ) {
            $min_bytes = $bytes;
        }

        if ( !defined $max_bytes || $bytes > $max_bytes ) {
            $max_bytes = $bytes;
        }

        if ( defined ( $cache->{$five}->{'flows'} ) ) {
            #warn "flow already defined";
        } else { 
            $cache->{$five}->{'flows'} = [];
        }
        push @{ $cache->{$five}->{'flows'} }, $row;

        if ( !defined $max_flows || @{ $cache->{$five}->{'flows'} } > $max_flows ) {
            $max_flows = @{ $cache->{$five}->{'flows'} };
        }

    }

    while( my ( $five, $flow_container ) = each %$cache ) {
        my $flows = $flow_container->{'flows'};
        if ( @$flows > 1 ) {
            my $previous_flow;
            my $i = 0;
            my %flows_to_remove = ();
            foreach my $flow (@$flows ) {
                my $start = $flow->{'start'};
                my $end = $flow->{'end'};
                $flow->{'flow_num'} = $i;
                if ( $previous_flow  ) {
                    if ( can_stitch_flows( $previous_flow->{'end'}, $start ) ) {
                        $flow = stitch_flows( $previous_flow, $flow );
                        $flows_to_remove{$i-1} = 1;
                        $stitchable_flows++;
                    } else {
                        # TODO: if can't fix flows, that means that flow has ended and can be output and removed from the cache

                    }

                }
                $previous_flow = $flow;
                $i++;
            }
            for (my $i=@$flows-1; $i>=0; $i--) {
                if ( $flows_to_remove{$i} ) {
                    #warn "removing flow $i";
                    splice @$flows, $i, 1;
                }

            }

        } 

    }

    # find stats on the final, stitched flows
    my $max_stitched_duration = 0;
    my $max_stitched_bytes = 0;
    my $min_stitched_duration;
    while( my ( $five, $flow_container ) = each %$cache ) {
        foreach my $row ( @{$flow_container->{'flows'}} ) {
            my $bytes = $row->{'values'}->{'num_bits'} / 8;
            my $duration = $row->{'values'}->{'duration'};
            if ( $duration > $max_stitched_duration ) {
                $max_stitched_duration = $duration;
            }
            if ( $bytes > $max_stitched_bytes ) {
                $max_stitched_bytes = $bytes;
            }
        }

    }

    #warn Dumper $cache;

    my $stitched_flows = get_flows('stitched');
    warn "STITCHED FLOWS:" . Dumper $stitched_flows;
    #warn "ALL DATA:" . Dumper $all_data;

    warn "STITCHED FLOW COUNT: " . @$stitched_flows;
    #output_csv($stitched_flows);

    warn "min start: $min_start";
    warn "max start: $max_start";
    warn "min end: $min_end";
    warn "max end: $max_end";
    warn "min duration: " . duration($min_duration);
    warn "max duration: " . duration($max_duration);
    warn "min bytes: " . format_bytes($min_bytes, bs => 1000);
    warn "max bytes: " . format_bytes($max_bytes, bs => 1000);
    warn "max flows: $max_flows";
    warn "overlaps: $overlaps";
    warn "stitchable flows: $stitchable_flows";
    warn "max stitched duration: " . duration($max_stitched_duration);
    warn "max stitched bytes: $max_stitched_bytes (" . format_bytes($max_stitched_bytes, bs => 1000) . ")";
    warn "Total flow count: " .  @$all_data;

}

sub output_csv {
    my $flows = shift;
    foreach my $flow (@$flows) {
        my $stitched = $flow->{'stitched'} || 0;
        my $row = '';
        $row .= $flow->{'start'} .",". $flow->{'end'} .','. $flow->{'values'}->{'duration'} .",". $flow->{'meta'}->{'src_ip'} .",". $flow->{'meta'}->{'dst_ip'} .",";
        $row .= $flow->{'meta'}->{'src_port'} .",". $flow->{'meta'}->{'dst_port'} .",". $flow->{'meta'}->{'protocol'} .",". 0 .",". 0 .",". 0 .",";
        $row .= $flow->{'values'}->{'num_packets'} .",".  $flow->{'values'}->{'num_bits'} / 8 ."," . $stitched;
        #$row =~ s/,$//;
        $row .= "\n";
        print $row;
    }

}

sub get_flows {
    my $type = shift || 'all';
    my $stitched_flows = [];
    foreach my $five ( keys %$cache ) {
        my $flow_container = $cache->{$five};
        my $flows = $flow_container->{'flows'};
        #warn "flows " . Dumper $flows;
        if ( $type eq 'stitched' ) {
            push @$stitched_flows,  grep { defined $_->{'stitched'} } @$flows;
        } elsif ( $type eq 'unstitched' ) {
            push @$stitched_flows,  grep { not defined $_->{'stitched'} } @$flows;
        } else {
            # all flows
            push @$stitched_flows, @$flows;

        }
    }
    return $stitched_flows;

}

sub stitch_flows {
    my ($flowA, $flowB) = @_;

    my $flow1;
    my $flow2;

    # make sure flow1 comes before flow2; 
    if ( $flowA->{'start'} < $flowB->{'start'} ) {
        $flow1 = $flowA;
        $flow2 = $flowB;
    } else {
        $flow1 = $flowB;
        $flow2 = $flowA;
    }

    # TODO :extend this to other values
    $flow1->{'end'} = $flow2->{'end'};
    #warn "flow1 duration: " . $flow1->{'values'}->{'duration'} . " flow2 duration: " . $flow2->{'values'}->{'duration'} . "; sum = " . ( $flow1->{'values'}->{'duration'} + $flow2->{'values'}->{'duration'} );
    $flow1->{'values'}->{'duration'} += $flow2->{'values'}->{'duration'};
    $flow1->{'values'}->{'num_bits'} += $flow2->{'values'}->{'num_bits'};
    $flow1->{'values'}->{'num_packets'} += $flow2->{'values'}->{'num_packets'};
    $flow1->{'stitched'} = 1;

    #warn "stitched: " . Dumper $flow1;


    return $flow1;

}

sub can_stitch_flows {
    my ($time1, $time2) = @_;
    if ( abs ( $time1 - $time2 ) < ACCEPTABLE_OFFSET ) {
        return 1;
    } else {
        return 0;
    }

}

sub sortdata {
    my $data = shift;
    my @sorted_data = sort bystarttime @$data;
    return \@sorted_data;

}
sub bystarttime {
    $a->{'start'} <=> $b->{'start'};
}

#print "cache: " . Dumper $cache;

sub print_memusage {
    my @usage = get_memusage(@_);
    warn "Usage: " . format_bytes($usage[0], bs => 1000) . "; " . $usage[1] . "%";
    return \@usage;
}

sub get_memusage {
    use Proc::ProcessTable;
    my @results;
    my $pid = (defined($_[0])) ? $_[0] : $$;
    my $proc = Proc::ProcessTable->new;
    my %fields = map { $_ => 1 } $proc->fields;
    return undef unless exists $fields{'pid'};
    foreach (@{$proc->table}) {
        if ($_->pid eq $pid) {
            push (@results, $_->size) if exists $fields{'size'};
            push (@results, $_->pctmem) if exists $fields{'pctmem'};
        };
    };
    return @results;
}

