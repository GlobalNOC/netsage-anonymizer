# Various preliminaries

filter {
  if [type] == 'flow' {

    # 1. Drop flows to or from private addresses (or other ranges we want to drop)
    cidr {
        address => [ "%{[meta][src_ip]}" ]
        network => [ "10.0.0.0/8", "100.64.0.0/10", "192.168.0.0/16", "172.16.0.0/12", "fc00::/7", "169.254.0.0/16", "fe80::/10", "::1/128" ]
        add_field => { "@private_src" => "yes" }
    }
    # can skip dst if src is private
    if ![@private_src] {
        cidr {
            address => [ "%{[meta][dst_ip]}" ]
            network => [ "10.0.0.0/8", "100.64.0.0/10", "192.168.0.0/16", "172.16.0.0/12", "fc00::/7", "169.254.0.0/16", "fe80::/10", "::1/128" ]
            add_field => { "@private_dst" => "yes" }
        }
    }
    if [@private_src] == "yes" or [@private_dst] == "yes" {
        drop { }
    }

    # 2. Add injest_time here in case aggregation isn't done (eg, for tstat).
    # (Copy makes a string; have to convert it to a date.)
    mutate {
      id => "02-1"
      add_field => { '@injest_time' =>  "%{@timestamp}" }
    }
    date {
      id => "02-2"
      match => [ "@injest_time", "ISO8601" ]
      target => "@injest_time"
    }

    # 3. Convert strings to numeric types where appropriate. We need to use these in calculations later.
    # Start and end are timestamps at this point. Make sure they are floats.
    # The geoip config needs asn's to be integers.
    mutate {
      id => "02-3"
      convert => {
        'start'                        => 'float'
        'end'                          => 'float'
        '[values][duration]'           => 'float'
        '[values][num_bits]'           => 'integer'
        '[values][num_packets]'        => 'integer'
        '[values][bits_per_second]'    => 'float'
        '[values][packets_per_second]' => 'float'
        '[meta][src_asn]'              => "integer"
        '[meta][dst_asn]'              => "integer"
      }
    }

    # 4. Convert any ms timestamps to s
    # 5. Drop any events with start or end times in the future or too far in the past
    ruby {
      id => "02-4"
      code => "
        flow_ts = event.get('start').to_f
        flow_te = event.get('end').to_f

      # Convert any timestamps in ms to s
        if flow_ts > 9999999999.0
            flow_ts = flow_ts / 1000.0
            event.set('start', flow_ts)
        end
        if flow_te > 9999999999.0 
            flow_te = flow_te / 1000.0
            event.set('end', flow_te)
        end

      # DROP any event with a strange start or end time
      # > 10 sec in the future or > 1 year in the past
        current_t = Time.now.to_f 
        age_s = current_t - flow_ts
        age_e = current_t - flow_te
        if age_s < -10.0 || age_s > 31536000.0 || age_e < -10.0 || age_e > 31536000.0
	    event.cancel
        end
      "
      tag_on_exception => '_rubyexception in 02-convert'
    }

  }
}
