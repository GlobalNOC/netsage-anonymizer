# Make changes required for specific sensors
# Parameters are obtained from an environment file (default: /etc/logstash/logstash-env-vars - see the logstash systemd file). 
# If values are not provided, the defaults following the :'s are used (flags will be False, so nothing will happen).
# With a bare-metal installation, you may also just edit this file and fill in the values you want.

filter {

      #---- Drop flows that do not have src or dst ifindex in a specified list of ifindexes
      mutate {
          add_field => { "[@metadata][ifindex_filter_flag]" => "${ifindex_filter_flag:False}" }
      }
      if [@metadata][ifindex_filter_flag] == "True"  {
          mutate {
              add_field => { "[@metadata][ifindex_filter_keep]" => "${ifindex_filter_keep:123,456}" }
              id => "15-1"
          }
          mutate {
              # Split the field into an array (in a separate mutate, since in mutate, split happens before all add_fields)
              # Add a dummy array element to force it to be an array, in case there is just 1 value in the env file,
              # otherwise 'in' will search for a substring in a string, which may not do what we want.
              split     =>  { "[@metadata][ifindex_filter_keep]" => "," }
              add_field =>  { "[@metadata][ifindex_filter_keep]" => "dummy" }
              id => "15-2"
          }
          if [meta][src_ifindex] not in [@metadata][ifindex_filter_keep] and [meta][dst_ifindex] not in [@metadata][ifindex_filter_keep] {
             drop { }
          }
      }


      #---- Change the sensor name for flows from a certain interface (ifindex) 
      mutate {
          add_field => { "[@metadata][ifindex_sensor_rename_flag]"     => "${ifindex_sensor_rename_flag:False}" }
          id => "15-3"
      }
      if [@metadata][ifindex_sensor_rename_flag] == "True" {
          mutate {
              add_field => { "[@metadata][ifindex_sensor_rename_old_name]" => "${ifindex_sensor_rename_old_name:oldname}" }
              add_field => { "[@metadata][ifindex_sensor_rename_new_name]" => "${ifindex_sensor_rename_new_name:newname}" }
              add_field => { "[@metadata][ifindex_sensor_rename_ifindex]"  => "${ifindex_sensor_rename_ifindex:1}" }
              id => "15-4"
          }
          if [meta][sensor_id] == [@metadata][ifindex_sensor_rename_old_name]
          and ( [meta][src_ifindex] == [@metadata][ifindex_sensor_rename_ifindex] or [meta][dst_ifindex] == [@metadata][ifindex_sensor_rename_ifindex] ) {
              mutate {
                  replace => { "[meta][sensor_id]" => "%{[@metadata][ifindex_sensor_rename_new_name]}" }
                  id => "15-5"
              }
          }
      }


      #---- Manually apply a sampling correction to listed sensors. Use only in special cases when the flow exporter or collector is providing corrections.
      # For netflow, a sampling rate correction can be done here or in the nfsen config or nfcapd command using the -s option.
      # For sflow, there is no such option, so it must be done here. 

      mutate {
         add_field => { "[@metadata][sampling_correction_flag]"    => "${sampling_correction_flag:False}" }
         id => "15-6"
      }
      if [@metadata][sampling_correction_flag] == "True" {
          mutate {
             add_field => { "[@metadata][sampling_correction_sensors]" => "${sampling_correction_sensors:sensor1,sensor2}" }
             add_field => { "[@metadata][sampling_correction_factor]"  => "${sampling_correction_factor:1}" }
             id => "15-7"
          }
          mutate {
	     # make the field into an array  (see comments about split above)
             split =>     { "[@metadata][sampling_correction_sensors]" => "," }           
             add_field => { "[@metadata][sampling_correction_sensors]" => "dummy" }
             id => "15-8"
          }
          if [meta][sensor_id] in [@metadata][sampling_correction_sensors] {
             ruby {
                 code => "
                      correction_factor = event.get('[@metadata][sampling_correction_factor]').to_i
                      event.set('[values][num_bits]',      correction_factor * event.get('[values][num_bits]').to_i)
                      event.set('[values][num_packets]',   correction_factor * event.get('[values][num_packets]').to_i)
                      event.set('[values][bits_per_second]',    correction_factor * event.get('[values][bits_per_second]').to_i)
                      event.set('[values][packets_per_second]', correction_factor * event.get('[values][packets_per_second]').to_i)
                 "
                 id => "15-9"
             }
          }
      }

}
