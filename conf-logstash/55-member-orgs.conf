# Here we replace source and destination organization names from prior tagging with the names of
# "member organizations" which have been assigned certain IP blocks by a parent org.
# Member names and IP ranges should be in *-members-list.rb files, eg, ilight-members-list.rb.
# To restrict lookups to certain ASNs, list those ASNs in *-members-list.rb also.

filter {
  if [type] == "flow" {

    ruby {
      id => "55-1"
      tag_on_exception => "_rubyexception in member_orgs"

      init => "
          # init is run only when logstash starts up. 

          # Ruby gem we need
          require 'ipaddr'
      
          # Read ALL support/*-members-list.rb files here.
          # Code in these files set, eg, @asn_list['example-network'] = [asn1, asn2]
          # and @members['example-network'] = { ipblock1 => member1, ipblock2 => members}
          @asn_list = {}
          @members = {}
          Dir.glob('./support/*-members-list.rb').each do |f| 
              eval(IO.read(f), binding)
          end
      "
      
      code => "
          # code is run for each event
      
          #==== Source ====
          src_members = {}
          found = false
 
   #   # PREFILTER BY ASN - find which ONE member list to use, based on the ASN
   #   # (next 7 lines)
   #      src_asn = event.get('[meta][src_asn]')   # this returns a string so asn lists need to be strings
   #      @asn_list.each do |network, asns|
   #          if asns.include?(src_asn)
   #             src_members = @members[network]
   #             break
   #          end
   #      end
   #
      # DON'T PREFILTER - loop over ALL member lists 
      # (1 line here + 'break' and 'end' lines below) 
      @members.each do |network, src_members|
   #
          # find the member netblock containing the IP and reset meta.organization
          if !src_members.empty?
              begin
              ip_obj = IPAddr.new( event.get('[meta][src_ip]') )
      
              src_members.each do |block, entity|
                  block_obj = IPAddr.new( block )
                  if block_obj.include?(ip_obj)
                      found = true
                      event.set('[meta][src_organization]', entity)      
                      break
                  end
              end
              rescue Exception => e
                  event.tag('_rubyexception in member_orgs - src - ' + e.message)
              end
          end

          break if found # FOR NO PREFILTERING
      end  # FOR NO PREFILTERING
 

          #==== Destination ====
          dst_members = {}
          found = false
 
   #   # PREFILTER BY ASN - find which ONE member list to use, based on the ASN
   #   # (next 7 lines)
   #      dst_asn = event.get('[meta][dst_asn]')   
   #      @asn_list.each do |network, asns|
   #          if asns.include?(dst_asn)
   #             dst_members = @members[network]
   #             break
   #          end
   #      end
   #
      # DON'T PREFILTER - loop over ALL member lists 
      # (2 lines here + 'break' and 'end' lines below) 
      @members.each do |network, dst_members|
   #
          # find the member netblock containing the IP and reset meta.organization
          if !dst_members.empty?
              begin
              ip_obj = IPAddr.new( event.get('[meta][dst_ip]') )
      
              dst_members.each do |block, entity|
                  block_obj = IPAddr.new( block )
                  if block_obj.include?(ip_obj)
                      found = true
                      event.set('[meta][dst_organization]', entity)      
                      break
                  end
              end
              rescue Exception => e
                  event.tag('_rubyexception in member_orgs - dst - ' + e.message)
              end
          end

          break if found # FOR NO PREFILTERING
      end  # FOR NO PREFILTERING
 

      "
    }

  }
}
