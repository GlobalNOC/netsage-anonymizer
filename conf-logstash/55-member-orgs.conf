# Here we replace organization names from geoip tagging with the names of
# "member or customer organizations" which have been assigned certain IP blocks by a parent org.
# The members may not have their own AS's.
# Member names and IP ranges should be provided in *-members-list.rb files, eg, ilight-members-list.rb.
#
# This version of the config is set up to replace I-LIGHT members only. 
# Other networks can be added as indicated by 'example'.
# At this time, we are not using pre-filtering by ASN.
# --> This file will be overwritten by upgrades.
# --> Get support/ilight-members-list.rb file on your own. An example example-members-list.rb is provided.

filter {
  if [type] == "flow" {

    ruby {
      id => "55-1"
      tag_on_exception => "_rubyexception in member_orgs"

      init => "
          # This is run only when logstash starts up. 
          p 'Getting member org lists'   # p=print

          # Ruby gem we need
          require 'ipaddr'
      
          # These ASN lists will be used to determine which member list to use
#          @asn_list = { 'ilight' => [ '1', '2', '3' ],
#                        'example' => [ '4' ]
#                      }
      
          # Get the member organization names and netblocks
          require './support/ilight-members-list.rb'
#         require './support/example-members-list.rb'
      
          @members = { 'ilight' => ILIGHT_MEMBERS }
#                     , 'example => XXX_MEMBERS }
      "
      
      code => "
          # This is run for each event
      
          #==== Source
          src_asn = event.get('[meta][src_asn]')
          src_members = {}
      
          # which member list to use
#          @asn_list.each do |network, asn_list|
#            if asn_list.include?(src_asn)
#               src_members = @members[network]
#               break
#            end
#          end
          src_members =  @members['ilight']       # remove if using the loop above
      
          # find the member netblock containing the IP and reset meta.organization
          if !src_members.empty?
              begin
              ip_obj = IPAddr.new( event.get('[meta][src_ip]') )
      
              src_members.each do |block, entity|
                  block_obj = IPAddr.new( block )
                  if block_obj.include?(ip_obj)
                      event.set('[meta][src_organization]', entity)
                      break
                  end
              end
              rescue Exception => e
                  event.tag('_rubyexception in member_orgs - src - ' + e.message)
              end
          end
      
          #==== Destination
          dst_asn = event.get('[meta][dst_asn]')
          dst_members = {}
      
          # which member list to use
#          @asn_list.each do |network, asn_list|
#            if asn_list.include?(dst_asn)
#               dst_members = @members[network]
#               break
#            end
#          end
          dst_members =  @members['ilight']       # remove if using the loop above
      
          # find the member netblock containing the IP and reset meta.organization
          if !dst_members.empty?
              begin
              ip_obj = IPAddr.new( event.get('[meta][dst_ip]') )
      
              dst_members.each do |block, entity|
                  block_obj = IPAddr.new( block )
                  if block_obj.include?(ip_obj)
                      event.set('[meta][dst_organization]', entity)
                      break
                  end
              end
              rescue Exception => e
                  event.tag('_rubyexception in member_orgs - dst - ' + e.message)
              end
          end
      "
    }

  }
}
