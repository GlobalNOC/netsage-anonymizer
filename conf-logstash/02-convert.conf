filter {
  if [type] == "flow" {

# convert strings to numeric logstash data types 
    mutate {
     convert => {
      "[start]"              => "float"
      "[end]"                => "float"
      "[values][duration]"   => "float"
      "[values][num_bits]"      => "integer"
      "[values][num_packets]"   => "integer"
      "[values][bits_per_second]"    => "float"
      "[values][packets_per_second]" => "float"
      }
    }

# Convert any millisecond timestamps to seconds
    ruby {
      code => " xstart = event.get('start').to_f
                xend   = event.get('end').to_f
                event.set('start', xstart/1000) if xstart > 9999999999
                event.set('end',   xend/1000)   if xend   > 9999999999
              "
    }

# Save timestamps 
    mutate {
      add_field => { "start_timestamp" => "%{start}" }
      add_field => { "end_timestamp" => "%{end}" }
      convert   => {
        "[start_timestamp]" => "float"
        "[end_timestamp]"   => "float"
      }
    }

# Convert start and end to DATE types 
# UNIX pattern will parse float or int value for unix time in seconds since epoch
    date {
      match  => [ "start","UNIX" ]
      target =>   "start"
    }
    date {
      match  => [ "end","UNIX" ]
      target =>   "end"
    }

  }
}
